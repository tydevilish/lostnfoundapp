// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// เพิ่ม enum สำหรับสถานะ
enum FoundStatus {
  OPEN
  RESOLVED
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  phone        String
  email        String      @unique
  passwordHash String
  avatarUrl    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt


  // relation ย้อนกลับ
  foundItems   FoundItem[]
  conversations  ConversationMember[]
  messagesSent  Message[]
}

model FoundItem {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId

  createdById  String      @db.ObjectId
  createdBy    User        @relation(fields: [createdById], references: [id])

  name         String
  category     String
  description  String?
  datetime     DateTime
  place        String
  color        String?
  brand        String?

  images       String[]    @default([])
  status       FoundStatus @default(OPEN)

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

model Conversation {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  isGroup        Boolean              @default(false)
  title          String?
  contextItemId  String?              @db.ObjectId // อ้างอิง FoundItem แบบหลวม ๆ (optional)
  lastMessageAt  DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  members        ConversationMember[]
  messages       Message[]

  @@index([lastMessageAt])
}

model ConversationMember {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String        @db.ObjectId
  conversation   Conversation  @relation(fields: [conversationId], references: [id])

  userId         String        @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])

  role           String?
  unreadCount    Int           @default(0)
  lastSeenAt     DateTime?
  createdAt      DateTime      @default(now())

  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String        @db.ObjectId
  conversation   Conversation  @relation(fields: [conversationId], references: [id])

  senderId       String        @db.ObjectId
  sender         User          @relation(fields: [senderId], references: [id])

  type           MessageType   @default(TEXT)
  text           String?
  attachments    String[]      @default([]) // URLs ของรูป/ไฟล์

  createdAt      DateTime      @default(now())

  @@index([conversationId, createdAt])
}